from aiogram.types import InlineKeyboardButton, FSInputFile, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.media_group import MediaGroupBuilder

from Callbackfactory import InterestsCallbackFactory


# –°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –≤—ã–∑–æ–≤–æ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
# –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤

back_button = "üîô –ù–∞–∑–∞–¥"
menu_button = "üîô –í –º–µ–Ω—é"   
close_button = "‚ùå–ó–∞–∫—Ä—ã—Ç—å‚ùå"


def get_callback_buttons_pref(btns: dict[str, str] | str, prefix: str = None):
    keyboard = InlineKeyboardBuilder()
    for data, text in btns.items():
        print(text)
        keyboard.add(InlineKeyboardButton(text=text,callback_data=prefix+"_"+data))
    # keyboard.add(InlineKeyboardButton(text=text,callback_data=prefix+back_button))
    return keyboard.adjust(1).as_markup()



def get_callback_buttons(btns: dict[str, str] | str):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        print(text)
        keyboard.add(InlineKeyboardButton(text=data,callback_data=text))
    keyboard.add(InlineKeyboardButton(text="Done ‚úÖ",callback_data="done_btn"))
    return keyboard.adjust(1).as_markup()


def get_callback_factory_buttons(btns: dict[str, dict] | str):
    keyboard = InlineKeyboardBuilder()
    for data, prop in btns.items():
        state = prop["state"]
        text = prop["text"]
        if state == 'on':
            text = "‚úîÔ∏è " + text
        keyboard.add(InlineKeyboardButton(text=text,
                             callback_data=InterestsCallbackFactory(interest = data, state=prop["state"]).pack()
                             ))
    keyboard.add(InlineKeyboardButton(text="Done ‚úÖ",callback_data="done_btn"))
    return keyboard.adjust(1).as_markup()




def get_album(photo_list: list[str] | str, caption: str):
    album_builder = MediaGroupBuilder(caption=caption)
    for photo in photo_list[:10]:
        album_builder.add_photo(media=FSInputFile(photo))
    return album_builder
 

    # photo_list = [
    #     FSInputFile("images/image1.png"),
    #     FSInputFile("images/image2.png")
    # ]

    # album_caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 10 —Ç–æ–∫–µ–Ω–æ–≤."

    # if not photo_list:
    #     await message.answer(album_caption)
    # else:
    #     album_builder = MediaGroupBuilder(caption=album_caption)
    #     for photo in photo_list[:10]:
    #         album_builder.add_photo(media=photo)
    #     await message.answer_media_group(media=album_builder.build())
